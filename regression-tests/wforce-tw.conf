setHLLBits(6)
setCountMinBits(0.05, 0.2)

field_map = {}
field_map["countLogins"] = "int"
field_map["failedLogins"] = "int"
field_map["subTest"] = "int"
field_map["diffPasswords"] = "hll"
field_map["diffIPs"] = "hll"
field_map["countryCount"] = "countmin"

newStringStatsDB("15SecondsFirstDB",1,15,field_map)
sdb = getStringStatsDB("15SecondsFirstDB")
sdb:twEnableReplication()

newStringStatsDB("15SecondsSecondDB",1,15,field_map)
sdb_prefix = getStringStatsDB("15SecondsSecondDB")
sdb_prefix:twSetv4Prefix(24)
sdb_prefix:twSetv6Prefix(64)
sdb_prefix:twEnableReplication()

newStringStatsDB("15SecondsSmallDB",1,15,field_map)
sdb_small = getStringStatsDB("15SecondsSmallDB")
sdb_small:twSetMaxSize(10)
sdb_small:twEnableReplication()

addCustomStat("customStat")

blacklistIP(newCA("127.0.0.1"), 3600, "this will get deleted")
unblacklistIP(newCA("127.0.0.1"))

whitelistIP(newCA("127.0.0.1"), 3600, "this will get deleted")
unwhitelistIP(newCA("127.0.0.1"))

ck={}
ck["url"] = "http://localhost:9080/webhook/regression"
ck["secret"] = "secret"
events = { "report", "allow", "reset", "addbl", "delbl", "expirebl" }

tack={}
tack["url"] = "http://localhost:8090/?command=report"
tack["secret"] = "secret"
tack["basic-auth"] = "wforce:super"
ta_events = { "report" }

ls_ck = {}
ls_ck["url"] = "http://logstash:8080"
ls_ck["secret"] = "verysecretcode"

function twreport(lt)
	local tls = lt.tls
	sdb = getStringStatsDB("15SecondsFirstDB")
	sdb_prefix = getStringStatsDB("15SecondsSecondDB")
	sdb_small = getStringStatsDB("15SecondsSmallDB")
        local countrydb = getGeoIP2DB("Country")
        cur_ct = countrydb:lookupCountry(lt.remote)
	sdb:twAdd(lt.login, "countLogins", 1)
	if (not lt.success)
	then
	   sdb:twAdd(lt.remote, "failedLogins", 1)
	end
	sdb:twSub(lt.login, "subTest", 1)
	sdb:twAdd(lt.login, "diffPasswords", lt.pwhash)
	sdb:twAdd(lt.login, "diffIPs", lt.remote)
	sdb_prefix:twAdd(lt.remote, "countLogins", 1)
	if (string.find(lt.login, "expirebaddie"))
	then
	    sdb_small:twAdd(lt.login, "countLogins", 1)
	end
end

function twallow(lt)
	local tls = lt.tls
	sdb = getStringStatsDB("15SecondsFirstDB")
	sdb_prefix = getStringStatsDB("15SecondsSecondDB")
	sdb_small = getStringStatsDB("15SecondsSmallDB")

        for k, v in pairs(lt.attrs) do
             if ((k == "accountStatus") and (v == "blocked"))
             then
                return -1, "accountStatus blocked", "accountStatus blocked", {}
             end
	end
        for k, v in pairs(lt.attrs_mv) do
             for i, vi in ipairs(v) do
                  if ((k == "countryList") and (vi == "Blockmestan"))
                  then
                        return -1, "blocked country", "blocked country", {}
                  end
              end
        end

        local countrydb = getGeoIP2DB("Country")
        cur_ct = countrydb:lookupCountry(lt.remote)
	if (cur_ct == "JP")
       	then
		return -1, "Japan is blocked", "Japan is blocked", {}
	end

	gip_record = lookupCity(lt.remote)
	if (gip_record.city == "Wokingham")
	then
	   return -1, "Wokingham is blocked", "Wokingham is blocked", {}
	end

	if (sdb:twGet(lt.login, "diffPasswords") > 20)
	then
		return -1, "diffPasswords for login", "diffPasswords for login", {}
	end

	if (sdb:twGet(lt.remote, "failedLogins") > 30)
	then
		return -1, "failed logins for IP", "failed logins for IP", {}
	end

	if (sdb:twGet(lt.login, "diffIPs") > 10)
	then
		return -1, "different IPs for login", "different IPs for login", {}
	end

	if (sdb:twGet(lt.login, "subTest") < -40)
	then
		return -1, "subTest", "subTest", {}
	end

	if (sdb_prefix:twGet(lt.remote, "countLogins") > 45)
	then
		return -1, "Too many logins (prefix)", "Too many logins (prefix)", {}
	end

	if (sdb_small:twGetSize() > 10)
	then
		return -1, "Small DB Size too big", "Small DB Size too big", {}
	end

	return 0, "", "", { os_family=lt.device_attrs["os.family"] }
end

function reset(type, login, ip)
	 sdb = getStringStatsDB("15SecondsFirstDB")
	 sdb_prefix = getStringStatsDB("15SecondsSecondDB")
	 sdb_small = getStringStatsDB("15SecondsSmallDB")
	 if (string.find(type, "ip"))
	 then
		sdb:twReset(ip)
		sdb_prefix:twReset(ip)
		sdb_small:twReset(ip)
	 end
	 if (string.find(type, "login"))
	 then
		sdb:twReset(login)
		sdb_prefix:twReset(login)
		sdb_small:twReset(login)
	 end
	 if (string.find(type, "ip") and string.find(type, "login"))
	 then
	 end
	 return true
end

function canonicalize(login)
	 newlogin = login .. "@foobar.com"
	 infoLog("canonicalize", { login_str=newlogin })
	 return newlogin
end

setAllow(twallow)

setReport(twreport)

setReset(reset)

setCanonicalize(canonicalize)

function custom(args)
   local login_name = "unknown"
   for k,v in pairs(args.attrs) do
      if (k == "login")
      then
	 login_name = v
      end
      infoLog("custom func argument attrs", { key=k, value=v });
   end
   -- this will fail until regression tests add a custom webhook
   runCustomWebHook("customwebhook", "{ \"loginname\":\"bar\"}")
   -- return consists of a boolean, followed by { key-value pairs }
   incCustomStat("customStat")
   return true, { login=login_name }
end

-- Register a custom endpoint
setCustomEndpoint("custom", true, custom)

newGeoIP2DB("City", "/usr/share/GeoIP/GeoLite2-City.mmdb")
newGeoIP2DB("Country", "/usr/share/GeoIP/GeoLite2-Country.mmdb")

function geoip2(args)
   local ip_address
   for k,v in pairs(args.attrs) do
      if (k == "ip")
      then
	 ip_address = v
      end
      infoLog("custom func argument attrs", { key=k, value=v });
   end
   local citydb = getGeoIP2DB("City")
   local geodata = citydb:lookupCity(newCA(ip_address))
   return true, {city=geodata.city}
end

setCustomEndpoint("geoip2", false, geoip2)

function incLogins(args)
   local sdb = getStringStatsDB("15SecondsFirstDB")
   login_name = "unknown"
   for k,v in pairs(args.attrs) do
      if (k == "login")
      then
	 login_name = v
      end
      infoLog("incLogins argument attrs", { key=k, value=v });
   end
   sdb:twAdd(login_name, "countLogins",1)
   local login_count = sdb:twGet(login_name, "countLogins")
   -- return consists of a boolean, followed by { key-value pairs }
   return true, { login=login_name, countLogins=login_count }
end

function countLogins(args)
   local sdb = getStringStatsDB("15SecondsFirstDB")
   login_name = "unknown"
   for k,v in pairs(args.attrs) do
      if (k == "login")
      then
	 login_name = v
      end
      infoLog("countLogins argument attrs", { key=k, value=v });
   end
   local login_count = sdb:twGet(login_name, "countLogins")
   -- return consists of a boolean, followed by { key-value pairs }
   return true, { login=login_name, countLogins=login_count }
end

function resetLogins(args)
   local sdb = getStringStatsDB("15SecondsFirstDB")
   login_name = "unknown"
   for k,v in pairs(args.attrs) do
      if (k == "login")
      then
	 login_name = v
      end
      infoLog("resetLogins argument attrs", { key=k, value=v });
   end
   sdb:twResetField(login_name, "countLogins")
   local login_count = sdb:twGet(login_name, "countLogins")
   -- return consists of a boolean, followed by { key-value pairs }
   return true, { login=login_name, countLogins=login_count }
end

setCustomEndpoint("incLogins", false, incLogins)
setCustomEndpoint("countLogins", false, countLogins)
setCustomEndpoint("resetLogins", false, resetLogins)
